 Паттерн "Состояние" (State) - это поведенческий паттерн, который позволяет объекту изменять свое поведение при
изменении его внутреннего состояния. Паттерн "Состояние" моделирует объект как конечный автомат, где каждое состояние
представляет собой разные наборы действий, которые объект может выполнять. В зависимости от текущего состояния,
объект будет выбирать, какое действие выполнить.

 Применимость паттерна "Состояние":

   - Когда объект должен изменять свое поведение в зависимости от его внутреннего состояния.
     Паттерн "Состояние" позволяет моделировать объект как конечный автомат, где каждое состояние представляет
     собой определенное поведение.
   - Когда у объекта слишком много условных операторов. Использование состояний позволяет вынести логику,
     зависящую от состояния, из объекта, что делает его более читаемым и поддерживаемым.
   - Когда различные состояния объекта могут быть реализованы как отдельные классы. Это позволяет добавлять новые
     состояния без изменения существующего кода.

 Плюсы паттерна "Состояние":

   - Разделение ответственности. Паттерн "Состояние" позволяет разделить ответственность за разные аспекты
     поведения объекта между разными классами состояний, что способствует соблюдению принципа единственной
     ответственности (SRP).
   - Уменьшение условной логики. Использование состояний устраняет необходимость в большом количестве условных
     операторов для управления поведением объекта в зависимости от состояния.
   - Гибкость и расширяемость. Добавление новых состояний или изменение поведения существующих состояний не влияет
     на другие части кода. Это делает систему более гибкой и расширяемой.

 Минусы паттерна "Состояние":

   - Увеличение числа классов. Использование паттерна "Состояние" может привести к созданию большого
     количества классов, особенно если у объекта много состояний.
   - Сложность в отслеживании состояний. В больших системах может быть сложно отслеживать все переходы между
     состояниями и правильно управлять ими.
   - Потеря состояния при смене контекста. Если не учитывать текущее состояние при копировании или сериализации объекта,
     может возникнуть потеря информации о состоянии.

 Пример использования паттерна "Состояние" на практике:

 Представьте систему управления заказами в интернет-магазине. Заказ может находиться в разных состояниях,
таких как "Новый", "Оплачен", "Доставлен" и "Завершен". В зависимости от текущего состояния заказа, разрешены
разные операции, например, оплата заказа доступна только для заказов в состоянии "Новый". В этом случае,
паттерн "Состояние" может быть применен для моделирования различных состояний заказа и переходов между ними.